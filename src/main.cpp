#include <cstdio>
#include <cstdint>

using namespace std;

unsigned char data_array[] = {
	0xa1, 0xf8,
	0xFA, 0x33, 0xC0, 0x8E, 0xD0, 0xBC, 0x00, 0x7C, 0x8B, 0xF4, 0x50, 0x07, 0x50, 0x1F, 0xFB, 0xFC, 
	0xBF, 0x00, 0x06, 0xB9, 0x00, 0x01, 0xF2, 0xA5, 0xEA, 0x1D, 0x06, 0x00, 0x00, 0xBE, 0xBE, 0x07, 
	0xB3, 0x04, 0x80, 0x3C, 0x80, 0x74, 0x0E, 0x80, 0x3C, 0x00, 0x75, 0x1C, 0x83, 0xC6, 0x10, 0xFE, 
	0xCB, 0x75, 0xEF, 0xCD, 0x18, 0x8B, 0x14, 0x8B, 0x4C, 0x02, 0x8B, 0xEE, 0x83, 0xC6, 0x10, 0xFE, 
	0xCB, 0x74, 0x1A, 0x80, 0x3C, 0x00, 0x74, 0xF4, 0xBE, 0x8B, 0x06, 0xAC, 0x3C, 0x00, 0x74, 0x0B, 
	0x56, 0xBB, 0x07, 0x00, 0xB4, 0x0E, 0xCD, 0x10, 0x5E, 0xEB, 0xF0, 0xEB, 0xFE, 0xBF, 0x05, 0x00, 
	0xBB, 0x00, 0x7C, 0xB8, 0x01, 0x02, 0x57, 0xCD, 0x13, 0x5F, 0x73, 0x0C, 0x33, 0xC0, 0xCD, 0x13, 
	0x4F, 0x75, 0xED, 0xBE, 0xA3, 0x06, 0xEB, 0xD3, 0xBE, 0xC4, 0x06, 0xBF, 0xFE, 0x7D, 0x81, 0x3D, 
	0x55, 0xAA, 0x75, 0xC7, 0x8B, 0xF5, 0xEA, 0x00, 0x7C, 0x00, 0x00, 0x4F, 0x6E, 0x67, 0x65, 0x6C, 
	0x64, 0x69, 0x67, 0x65, 0x20, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x65, 0x74, 0x61, 0x62, 
	0x65, 0x6C, 0x00, 0x46, 0x6F, 0x75, 0x74, 0x20, 0x62, 0x69, 0x6A, 0x20, 0x6C, 0x61, 0x64, 0x65, 
	0x6E, 0x20, 0x62, 0x65, 0x73, 0x74, 0x75, 0x72, 0x69, 0x6E, 0x67, 0x73, 0x73, 0x79, 0x73, 0x74, 
	0x65, 0x65, 0x6D, 0x00, 0x47, 0x65, 0x65, 0x6E, 0x20, 0x62, 0x65, 0x73, 0x74, 0x75, 0x72, 0x69, 
	0x6E, 0x67, 0x73, 0x73, 0x79, 0x73, 0x74, 0x65, 0x65, 0x6D, 0x20, 0x61, 0x61, 0x6E, 0x77, 0x65, 
	0x7A, 0x69, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 
	0x01, 0x00, 0x01, 0x04, 0x11, 0xF9, 0x11, 0x00, 0x00, 0x00, 0xF1, 0x52, 0x00, 0x00, 0x00, 0x00, 
	0x01, 0xFA, 0x05, 0x04, 0xD1, 0xD3, 0x02, 0x53, 0x00, 0x00, 0x62, 0xF2, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0xAA,
	0x89, 0xF3, 0x48, 0x23
};

//////////////////////////

static const unsigned char BitReverseTable256[256] = 
{
#   define R2(n)     n,     n + 2*64,     n + 1*64,     n + 3*64
#   define R4(n) R2(n), R2(n + 2*16), R2(n + 1*16), R2(n + 3*16)
#   define R6(n) R4(n), R4(n + 2*4 ), R4(n + 1*4 ), R4(n + 3*4 )
    R6(0), R6(2), R6(1), R6(3)
};

uint32_t bitswap(const uint32_t v)
{
	return (BitReverseTable256[v & 0xff] << 24) |
		(BitReverseTable256[(v >> 8) & 0xff] << 16) |
		(BitReverseTable256[(v >> 16) & 0xff] << 8) |
		(BitReverseTable256[(v >> 24) & 0xff]);
}

////////////////////////////////

uint32_t POLY = 0x140A0445;

uint32_t crc32(uint32_t initval, unsigned char * data, size_t len)
{
	uint32_t crc = initval;
	size_t i = 0;

	while (i < len) {
		unsigned char x = data[i++];

		for (int j=0; j<8; j++) {
			unsigned char feedback = (crc >> 31) ^ (x >> 7);

			crc = (crc << 1);

			if (feedback)
				crc ^= POLY;

			x <<= 1;
		}
	}

	return crc;
}

//////////////////////////////////

int main(void)
{
	unsigned char z[] = { 0xa1, 0xf8 };
	printf("%08X  [target]\n", 0xb517894a);
	printf("%08X  [calculated]\n", crc32(0xffffffff, z, 2));

	printf("%02X%02X%02X%02X  [target]\n",
			data_array[512+2],
			data_array[513+2],
			data_array[514+2],
			data_array[515+2]
		  );

	/***
	 * CRC parameters:
	 *   Polynomial             -- 0x140A0445
	 *   Initialisation Vector  -- 0xFFFFFFFF
	 *   Starting point         -- Start of DAM sync header (0xA1 0xF8)
	 *   End point              -- End of data payload
	 *   Total CRC length       -- sector_size + 2 bytes
	 *
	 * Interesting factoid: crc32(concat(data, crc32(data))) == 0.
	 */
	printf("%08X  [calculated]\n", crc32(0xffffffff, data_array, 512+2));

/*
	// Exhaustive search for a polynomial which produces the required output...
	unsigned char z[] = { 0xa1, 0xf8 };

	for (POLY=1; POLY<0xFFFFFFFFul; POLY++) {
		if (crc32(0xffffffff, z, 2) == 0xB517894A) {
			printf("HIT: poly=%08lX\n", (unsigned long)POLY);
		}
	}
*/
	return 0;
}
